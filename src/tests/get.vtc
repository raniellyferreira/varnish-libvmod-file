# looks like -*- vcl -*-

varnishtest "reader constructor and .get()"

shell {echo -n "foo bar baz quux" > ${tmpdir}/file}

varnish v1 -vcl {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}/file");
	}

	sub vcl_recv {
		return (synth(200));
	}

	sub vcl_synth {
		set resp.http.Get = rdr.get();
		return (deliver);
	}
} -start

client c1 {
	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.Get == "foo bar baz quux"
} -run

shell {ln -s ${tmpdir}/file ${tmpdir}/link}

varnish v1 -vcl {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}/link");
	}

	sub vcl_recv {
		return (synth(200));
	}

	sub vcl_synth {
		set resp.http.Get = rdr.get();
		return (deliver);
	}
}

client c1 -run

varnish v1 -vcl {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}/file", ttl=0.1s,
		                      log_checks=true);
	}

	sub vcl_recv {
		set req.http.Get = rdr.get();
		return (synth(200));
	}

	sub vcl_synth {
		set resp.http.Get = req.http.Get;
		return (deliver);
	}
}

# Run twice with a delay between, to test the "no change" case.
client c1 -run
delay .1
client c1 -run

shell {echo -n "quux baz bar foo" > ${tmpdir}/file}
delay .1

client c1 {
	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.Get == "quux baz bar foo"
} -run

logexpect l1 -v v1 -d 1 -g raw -q "Debug" {
	expect * * Debug	{^vmod file: vcl3\.rdr: check for \S+ running at}
	expect * * Debug	{^vmod file: vcl3\.rdr: updating \S+ at}
	expect * * Debug	{^vmod file: vcl3\.rdr: check for \S+ finished successfully at}
} -run

shell {chmod a-r ${tmpdir}/file}
delay .1

client c2 {
	txreq
	rxresp
	expect resp.status == 503
	expect resp.reason == "VCL failed"
} -run

logexpect l1 -v v1 -d 1 -g vxid -q "VCL_Error" {
	expect 0 * Begin	req
	expect * = VCL_Error	{^rdr\.get\(\): vmod file failure: vcl3\.rdr: cannot open}
	expect * = End
} -run

logexpect l1 -v v1 -d 1 -g raw -q "Error" {
	expect * 0 Error	{^vmod file failure: vcl3\.rdr: cannot open}
} -run

shell {
	rm -f ${tmpdir}/file
	echo -n "quux baz bar foo" > ${tmpdir}/file
}
delay .1

client c1 -run

shell {rm -f ${tmpdir}/file}
delay .1

# The file is deleted, but the mapping is retained (until munmap), so
# the client will still see the mapped contents.
client c1 -run

shell {echo -n "The quick brown fox jumps over the lazy dog." > ${tmpdir}/fox}

varnish v1 -vcl {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}/fox", ttl=0s);
	}

	sub vcl_recv {
		return (synth(200));
	}

	sub vcl_synth {
		set resp.http.Get = rdr.get();
		return (deliver);
	}
}

client c1 {
	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.Get == "The quick brown fox jumps over the lazy dog."
} -run

shell {
	rm -f ${tmpdir}/fox
	echo -n "twentieth century fox" > ${tmpdir}/fox
}
delay .1

client c1 {
	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.Get == "The quick brown fox jumps over the lazy dog."
} -run

varnish v1 -errvcl {cannot open} {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}/nosuchfile");
	}
}

varnish v1 -errvcl {not a regular file} {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}");
	}
}

shell {ln -s ${tmpdir} ${tmpdir}/dirlink}

varnish v1 -errvcl {not a regular file} {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("${tmpdir}/dirlink");
	}
}

varnish v1 -errvcl {vmod file failure: new rdr: name is empty} {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("");
	}
}

varnish v1 -errvcl {vmod file failure: new rdr: ttl -1.000 must be >= 0s} {
	import ${vmod_file};
	backend b { .host = "${bad_ip}"; }

	sub vcl_init {
		new rdr = file.reader("foo", ttl=-1s);
	}
}

varnish v1 -cliok "vcl.discard vcl1"
varnish v1 -cli "vcl.list"
